import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import datetime
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt

plt.style.use("ggplot") # Set plot style
#%matplotlib inline


from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
data1 = pd.read_excel('/content/drive/MyDrive/Tesi/ambassador_estrazione_30-06-2024_4mesi_oraria/Prove/Compressore 1 corretto.xlsx')
data2 = pd.read_excel('/content/drive/MyDrive/Tesi/ambassador_estrazione_30-06-2024_4mesi_oraria/Prove/Compressore 2 corretto.xlsx')
data3 = pd.read_excel('/content/drive/MyDrive/Tesi/ambassador_estrazione_30-06-2024_4mesi_oraria/Prove/Compressore 3 corretto.xlsx')
data4 = pd.read_excel('/content/drive/MyDrive/Tesi/ambassador_estrazione_30-06-2024_4mesi_oraria/Prove/Compressore 4 corretto.xlsx')

data1.head()
data2.head()
data3.head()
data4.head()

datasets = [data1, data2, data3, data4]

for i, data in enumerate(datasets, 1):
    data.rename(columns={data.columns[0]: 'Date'}, inplace=True)
    data['Date'] = pd.to_datetime(data['Date'])
    data.set_index('Date', inplace=True)
    print(f"Dataset {i}:")
    print(data.head())  # Visualizza le prime righe del dataset modificato


datasets = [data1, data2, data3, data4]

for i, data in enumerate(datasets, 1):
    data = data.reset_index()
    data["Date"] = pd.to_datetime(data["Date"])
    datasets[i-1] = data  # Aggiorna il dataset nella lista se vuoi che le modifiche si riflettano

    print(f"Dataset {i}:")
    print(data.head())


for i, data in enumerate(datasets, 1):
  data = data.reset_index()
  data["Date"] = pd.to_datetime(data["Date"])


for i, data in enumerate(datasets, 1):
    # Ensure 'Date' column exists and is of datetime type before proceeding.
  if 'Date' not in data.columns:
    # If missing in any dataframe, you may want to stop execution, fix input, or skip, depending on use case.
    raise KeyError(f"DataFrame {i} is missing a 'Date' column")
  data['Date'] = pd.to_datetime(data['Date'])
  data["Hour"] = data["Date"].dt.hour
  data["Day"] = data["Date"].dt.dayofweek
  data["Month"] = data["Date"].dt.month
  data["Year"] = data["Date"].dt.year
  data["Q"] = data["Date"].dt.quarter
  data["Dayofyear"] = data["Date"].dt.dayofyear
  data["Dayofmonth"] = data["Date"].dt.day

for i, data in enumerate(datasets, 1):
    # Ensure 'Date' column exists and is of datetime type before proceeding.
  if 'Date' not in data.columns:
    data["Drop_me"] = data["Date"].dt.strftime("%m-%d")

    data.index = data["Date"]
    data = data.drop(["Date"],axis=1)

#visualizzazione della distribuzione del consumo di corrente
# Supponiamo che 'data["Corrente (A)"]' contenga i dati da plottare
ax, fig = plt.subplots(figsize=(15, 5))

plt.hist(data1["Corrente (A)"], bins=80)  # Puoi modificare il numero di bins in base ai tuoi dati

# Cambia la scala dell'asse x
x_ticks = np.arange(min(data1["Corrente (A)"]), max(data1["Corrente (A)"]), 10)
plt.xticks(x_ticks, alpha=0.75, weight="bold")

# Cambia l'aspetto degli altri assi
plt.yticks(alpha=0.75, weight="bold")
plt.xlabel("", alpha=0.75, weight="bold")
plt.ylabel("", alpha=0.75, weight="bold")

# Imposta il titolo
plt.title("Consumption distribution", alpha=0.60, weight="bold", fontsize=10, loc="left", pad=10)

plt.show()



#visualizzazione trimestrale dei consumi
#Data prep
Q1 = data1[data1["Q"]==1]
Q2 = data1[data1["Q"]==2]
Q3 = data1[data1["Q"]==3]
Q4 = data1[data1["Q"]==4]

#Plot
fig,axes = plt.subplots(2,2,figsize=(17,7),sharex=True,sharey=True)

sns.histplot(Q1["Corrente (A)"],color="skyblue", kde=True, ax=axes[0,0]).set_title("Q1 - Consumption")
sns.histplot(Q2["Corrente (A)"],color="orange", kde=True, ax=axes[0,1]).set_title("Q2 - Consumption")
sns.histplot(Q3["Corrente (A)"],color="green", kde=True, ax=axes[1,0]).set_title("Q3 - Consumption")
sns.histplot(Q4["Corrente (A)"],color="red", kde=True, ax=axes[1,1]).set_title("Q4 - Consumption")

del Q1, Q2, Q3, Q4



#media giornaliera dei consumi 
#Data prep
mean_per_day = data1.groupby("Day")["Corrente (A)"].agg(["mean"])
#Plot
fig, ax = plt.subplots(figsize=(10,5))


plt.plot(mean_per_day.index,mean_per_day["mean"])

plt.xticks(mean_per_day.index, ["Monday","Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"], alpha=0.75, weight="bold")
plt.yticks(alpha=0.75, weight="bold")

plt.xlabel("Day of the week",alpha=0.75, weight="bold")
plt.ylabel("Mean consumption",alpha=0.75, weight="bold")

plt.title("Mean daily consumption", alpha=0.60, weight="bold", fontsize=15, loc="left", pad=10)

#del mean_per_day





#distribuzione media oraria dei consumi di corrente
#Data
mean_per_hour = data1.groupby("Hour")["Corrente (A)"].agg(["mean"])

#Plot
fig, ax = plt.subplots(figsize=(10,5))

plt.bar(mean_per_hour.index, mean_per_hour["mean"])

plt.xticks(range(24),alpha=0.75, weight="bold")
plt.yticks(alpha=0.75, weight="bold")

plt.xlabel("Hour",alpha=0.75, weight="bold")
plt.ylabel("Mean consumption",alpha=0.75, weight="bold")

plt.title("Mean hourly consumption", alpha=0.60, weight="bold", fontsize=15, loc="left", pad=10)

del mean_per_hour


for i, data in enumerate(datasets, 1):
    # Creazione del grafico per il dataset corrente
    data['Corrente (A)'].plot(kind='line', figsize=(10,5), title='Corrente (A)', label=f'Dataset {i}')

    # Rimozione delle spine superiori e destra
    plt.gca().spines[['top', 'right']].set_visible(False)

# Aggiunta della legenda per ogni dataset
plt.legend()

  #plot corrente compressore1
  data1['Corrente (A)'].plot(kind='line', figsize=(8, 4), title='Corrente (A) ')
  plt.gca().spines[['top', 'right']].set_visible(False)

  #plot corrente compressore2
  data2['Corrente (A)'].plot(kind='line', figsize=(8, 4), title='Corrente (A) ')
  plt.gca().spines[['top', 'right']].set_visible(False)

  #plot corrente compressore3
  data3['Corrente (A)'].plot(kind='line', figsize=(8, 4), title='Corrente (A) ')
  plt.gca().spines[['top', 'right']].set_visible(False)

  #plot corrente compressore4
  data4['Corrente (A)'].plot(kind='line', figsize=(8, 4), title='Corrente (A) ')
  plt.gca().spines[['top', 'right']].set_visible(False)

  #Selezione delle colonne di interesse
  columns = ['Corrente (A)', 'Energia consumo (kWh)', 'Tensione (V)']

  data_to_use1 = data1[columns]
  data_to_use2 = data2[columns]
  data_to_use3 = data3[columns]
  data_to_use4 = data4[columns]

  data_to_use1





